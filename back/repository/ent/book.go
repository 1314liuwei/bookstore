// Code generated by entc, DO NOT EDIT.

package ent

import (
	"back/repository/ent/book"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// SurplusCatch holds the value of the "surplus_catch" field.
	SurplusCatch int `json:"surplus_catch,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Describe holds the value of the "describe" field.
	Describe string `json:"describe,omitempty"`
	// Ebook holds the value of the "ebook" field.
	Ebook string `json:"ebook,omitempty"`
	// Cover holds the value of the "cover" field.
	Cover string `json:"cover,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges              BookEdges `json:"edges"`
	order_book         *int
	shopping_cart_book *int
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldID, book.FieldPrice, book.FieldSurplusCatch:
			values[i] = new(sql.NullInt64)
		case book.FieldName, book.FieldAuthor, book.FieldDescribe, book.FieldEbook, book.FieldCover:
			values[i] = new(sql.NullString)
		case book.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case book.ForeignKeys[0]: // order_book
			values[i] = new(sql.NullInt64)
		case book.ForeignKeys[1]: // shopping_cart_book
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Book", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case book.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case book.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				b.Price = int(value.Int64)
			}
		case book.FieldSurplusCatch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field surplus_catch", values[i])
			} else if value.Valid {
				b.SurplusCatch = int(value.Int64)
			}
		case book.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				b.Author = value.String
			}
		case book.FieldDescribe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field describe", values[i])
			} else if value.Valid {
				b.Describe = value.String
			}
		case book.FieldEbook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ebook", values[i])
			} else if value.Valid {
				b.Ebook = value.String
			}
		case book.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				b.Cover = value.String
			}
		case book.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case book.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_book", value)
			} else if value.Valid {
				b.order_book = new(int)
				*b.order_book = int(value.Int64)
			}
		case book.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shopping_cart_book", value)
			} else if value.Valid {
				b.shopping_cart_book = new(int)
				*b.shopping_cart_book = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCategory queries the "category" edge of the Book entity.
func (b *Book) QueryCategory() *CategoryQuery {
	return (&BookClient{config: b.config}).QueryCategory(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return (&BookClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", b.Price))
	builder.WriteString(", surplus_catch=")
	builder.WriteString(fmt.Sprintf("%v", b.SurplusCatch))
	builder.WriteString(", author=")
	builder.WriteString(b.Author)
	builder.WriteString(", describe=")
	builder.WriteString(b.Describe)
	builder.WriteString(", ebook=")
	builder.WriteString(b.Ebook)
	builder.WriteString(", cover=")
	builder.WriteString(b.Cover)
	builder.WriteString(", created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book

func (b Books) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
