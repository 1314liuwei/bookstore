// Code generated by entc, DO NOT EDIT.

package book

import (
	"time"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEbook holds the string denoting the ebook field in the database.
	FieldEbook = "ebook"
	// FieldCover holds the string denoting the cover field in the database.
	FieldCover = "cover"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeShoppingCart holds the string denoting the shopping_cart edge name in mutations.
	EdgeShoppingCart = "shopping_cart"
	// Table holds the table name of the book in the database.
	Table = "books"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "books"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_book"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "orders"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "book_order"
	// ShoppingCartTable is the table that holds the shopping_cart relation/edge.
	ShoppingCartTable = "shopping_carts"
	// ShoppingCartInverseTable is the table name for the ShoppingCart entity.
	// It exists in this package in order to avoid circular dependency with the "shoppingcart" package.
	ShoppingCartInverseTable = "shopping_carts"
	// ShoppingCartColumn is the table column denoting the shopping_cart relation/edge.
	ShoppingCartColumn = "book_shopping_cart"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAuthor,
	FieldDescription,
	FieldEbook,
	FieldCover,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "books"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_book",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
