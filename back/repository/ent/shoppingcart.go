// Code generated by entc, DO NOT EDIT.

package ent

import (
	"back/repository/ent/book"
	"back/repository/ent/shoppingcart"
	"back/repository/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ShoppingCart is the model entity for the ShoppingCart schema.
type ShoppingCart struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingCartQuery when eager-loading is set.
	Edges              ShoppingCartEdges `json:"edges"`
	book_shopping_cart *int
	user_shopping_cart *int
}

// ShoppingCartEdges holds the relations/edges for other nodes in the graph.
type ShoppingCartEdges struct {
	// Book holds the value of the book edge.
	Book *Book `json:"book,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BookOrErr returns the Book value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingCartEdges) BookOrErr() (*Book, error) {
	if e.loadedTypes[0] {
		if e.Book == nil {
			// The edge book was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: book.Label}
		}
		return e.Book, nil
	}
	return nil, &NotLoadedError{edge: "book"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingCartEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShoppingCart) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shoppingcart.FieldID, shoppingcart.FieldAmount:
			values[i] = new(sql.NullInt64)
		case shoppingcart.FieldCreatedAt, shoppingcart.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		case shoppingcart.ForeignKeys[0]: // book_shopping_cart
			values[i] = new(sql.NullInt64)
		case shoppingcart.ForeignKeys[1]: // user_shopping_cart
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShoppingCart", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShoppingCart fields.
func (sc *ShoppingCart) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shoppingcart.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case shoppingcart.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				sc.Amount = int(value.Int64)
			}
		case shoppingcart.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case shoppingcart.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				sc.UpdateAt = value.Time
			}
		case shoppingcart.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field book_shopping_cart", value)
			} else if value.Valid {
				sc.book_shopping_cart = new(int)
				*sc.book_shopping_cart = int(value.Int64)
			}
		case shoppingcart.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_shopping_cart", value)
			} else if value.Valid {
				sc.user_shopping_cart = new(int)
				*sc.user_shopping_cart = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBook queries the "book" edge of the ShoppingCart entity.
func (sc *ShoppingCart) QueryBook() *BookQuery {
	return (&ShoppingCartClient{config: sc.config}).QueryBook(sc)
}

// QueryUser queries the "user" edge of the ShoppingCart entity.
func (sc *ShoppingCart) QueryUser() *UserQuery {
	return (&ShoppingCartClient{config: sc.config}).QueryUser(sc)
}

// Update returns a builder for updating this ShoppingCart.
// Note that you need to call ShoppingCart.Unwrap() before calling this method if this ShoppingCart
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ShoppingCart) Update() *ShoppingCartUpdateOne {
	return (&ShoppingCartClient{config: sc.config}).UpdateOne(sc)
}

// Unwrap unwraps the ShoppingCart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ShoppingCart) Unwrap() *ShoppingCart {
	tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShoppingCart is not a transactional entity")
	}
	sc.config.driver = tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ShoppingCart) String() string {
	var builder strings.Builder
	builder.WriteString("ShoppingCart(")
	builder.WriteString(fmt.Sprintf("id=%v", sc.ID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", sc.Amount))
	builder.WriteString(", created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(sc.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ShoppingCarts is a parsable slice of ShoppingCart.
type ShoppingCarts []*ShoppingCart

func (sc ShoppingCarts) config(cfg config) {
	for _i := range sc {
		sc[_i].config = cfg
	}
}
