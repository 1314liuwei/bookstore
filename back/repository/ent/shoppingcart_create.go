// Code generated by entc, DO NOT EDIT.

package ent

import (
	"back/repository/ent/book"
	"back/repository/ent/shoppingcart"
	"back/repository/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartCreate is the builder for creating a ShoppingCart entity.
type ShoppingCartCreate struct {
	config
	mutation *ShoppingCartMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (scc *ShoppingCartCreate) SetAmount(i int) *ShoppingCartCreate {
	scc.mutation.SetAmount(i)
	return scc
}

// SetCreatedAt sets the "created_at" field.
func (scc *ShoppingCartCreate) SetCreatedAt(t time.Time) *ShoppingCartCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ShoppingCartCreate) SetNillableCreatedAt(t *time.Time) *ShoppingCartCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdateAt sets the "update_at" field.
func (scc *ShoppingCartCreate) SetUpdateAt(t time.Time) *ShoppingCartCreate {
	scc.mutation.SetUpdateAt(t)
	return scc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (scc *ShoppingCartCreate) SetNillableUpdateAt(t *time.Time) *ShoppingCartCreate {
	if t != nil {
		scc.SetUpdateAt(*t)
	}
	return scc
}

// AddBookIDs adds the "book" edge to the Book entity by IDs.
func (scc *ShoppingCartCreate) AddBookIDs(ids ...int) *ShoppingCartCreate {
	scc.mutation.AddBookIDs(ids...)
	return scc
}

// AddBook adds the "book" edges to the Book entity.
func (scc *ShoppingCartCreate) AddBook(b ...*Book) *ShoppingCartCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return scc.AddBookIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (scc *ShoppingCartCreate) AddUserIDs(ids ...int) *ShoppingCartCreate {
	scc.mutation.AddUserIDs(ids...)
	return scc
}

// AddUser adds the "user" edges to the User entity.
func (scc *ShoppingCartCreate) AddUser(u ...*User) *ShoppingCartCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scc.AddUserIDs(ids...)
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scc *ShoppingCartCreate) Mutation() *ShoppingCartMutation {
	return scc.mutation
}

// Save creates the ShoppingCart in the database.
func (scc *ShoppingCartCreate) Save(ctx context.Context) (*ShoppingCart, error) {
	var (
		err  error
		node *ShoppingCart
	)
	scc.defaults()
	if len(scc.hooks) == 0 {
		if err = scc.check(); err != nil {
			return nil, err
		}
		node, err = scc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingCartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scc.check(); err != nil {
				return nil, err
			}
			scc.mutation = mutation
			if node, err = scc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scc.hooks) - 1; i >= 0; i-- {
			if scc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ShoppingCartCreate) SaveX(ctx context.Context) *ShoppingCart {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ShoppingCartCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ShoppingCartCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ShoppingCartCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := shoppingcart.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdateAt(); !ok {
		v := shoppingcart.DefaultUpdateAt()
		scc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ShoppingCartCreate) check() error {
	if _, ok := scc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "amount"`)}
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := scc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	return nil
}

func (scc *ShoppingCartCreate) sqlSave(ctx context.Context) (*ShoppingCart, error) {
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (scc *ShoppingCartCreate) createSpec() (*ShoppingCart, *sqlgraph.CreateSpec) {
	var (
		_node = &ShoppingCart{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shoppingcart.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shoppingcart.FieldID,
			},
		}
	)
	if value, ok := scc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shoppingcart.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shoppingcart.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shoppingcart.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := scc.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShoppingCartCreateBulk is the builder for creating many ShoppingCart entities in bulk.
type ShoppingCartCreateBulk struct {
	config
	builders []*ShoppingCartCreate
}

// Save creates the ShoppingCart entities in the database.
func (sccb *ShoppingCartCreateBulk) Save(ctx context.Context) ([]*ShoppingCart, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ShoppingCart, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShoppingCartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ShoppingCartCreateBulk) SaveX(ctx context.Context) []*ShoppingCart {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ShoppingCartCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ShoppingCartCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
