// Code generated by entc, DO NOT EDIT.

package ent

import (
	"back/repository/ent/book"
	"back/repository/ent/predicate"
	"back/repository/ent/shoppingcart"
	"back/repository/ent/user"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartUpdate is the builder for updating ShoppingCart entities.
type ShoppingCartUpdate struct {
	config
	hooks    []Hook
	mutation *ShoppingCartMutation
}

// Where appends a list predicates to the ShoppingCartUpdate builder.
func (scu *ShoppingCartUpdate) Where(ps ...predicate.ShoppingCart) *ShoppingCartUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetAmount sets the "amount" field.
func (scu *ShoppingCartUpdate) SetAmount(i int) *ShoppingCartUpdate {
	scu.mutation.ResetAmount()
	scu.mutation.SetAmount(i)
	return scu
}

// AddAmount adds i to the "amount" field.
func (scu *ShoppingCartUpdate) AddAmount(i int) *ShoppingCartUpdate {
	scu.mutation.AddAmount(i)
	return scu
}

// SetUpdateAt sets the "update_at" field.
func (scu *ShoppingCartUpdate) SetUpdateAt(t time.Time) *ShoppingCartUpdate {
	scu.mutation.SetUpdateAt(t)
	return scu
}

// AddBookIDs adds the "book" edge to the Book entity by IDs.
func (scu *ShoppingCartUpdate) AddBookIDs(ids ...int) *ShoppingCartUpdate {
	scu.mutation.AddBookIDs(ids...)
	return scu
}

// AddBook adds the "book" edges to the Book entity.
func (scu *ShoppingCartUpdate) AddBook(b ...*Book) *ShoppingCartUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return scu.AddBookIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (scu *ShoppingCartUpdate) AddUserIDs(ids ...int) *ShoppingCartUpdate {
	scu.mutation.AddUserIDs(ids...)
	return scu
}

// AddUser adds the "user" edges to the User entity.
func (scu *ShoppingCartUpdate) AddUser(u ...*User) *ShoppingCartUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scu.AddUserIDs(ids...)
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scu *ShoppingCartUpdate) Mutation() *ShoppingCartMutation {
	return scu.mutation
}

// ClearBook clears all "book" edges to the Book entity.
func (scu *ShoppingCartUpdate) ClearBook() *ShoppingCartUpdate {
	scu.mutation.ClearBook()
	return scu
}

// RemoveBookIDs removes the "book" edge to Book entities by IDs.
func (scu *ShoppingCartUpdate) RemoveBookIDs(ids ...int) *ShoppingCartUpdate {
	scu.mutation.RemoveBookIDs(ids...)
	return scu
}

// RemoveBook removes "book" edges to Book entities.
func (scu *ShoppingCartUpdate) RemoveBook(b ...*Book) *ShoppingCartUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return scu.RemoveBookIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (scu *ShoppingCartUpdate) ClearUser() *ShoppingCartUpdate {
	scu.mutation.ClearUser()
	return scu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (scu *ShoppingCartUpdate) RemoveUserIDs(ids ...int) *ShoppingCartUpdate {
	scu.mutation.RemoveUserIDs(ids...)
	return scu
}

// RemoveUser removes "user" edges to User entities.
func (scu *ShoppingCartUpdate) RemoveUser(u ...*User) *ShoppingCartUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShoppingCartUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scu.defaults()
	if len(scu.hooks) == 0 {
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingCartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShoppingCartUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShoppingCartUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShoppingCartUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ShoppingCartUpdate) defaults() {
	if _, ok := scu.mutation.UpdateAt(); !ok {
		v := shoppingcart.UpdateDefaultUpdateAt()
		scu.mutation.SetUpdateAt(v)
	}
}

func (scu *ShoppingCartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shoppingcart.Table,
			Columns: shoppingcart.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shoppingcart.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shoppingcart.FieldAmount,
		})
	}
	if value, ok := scu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shoppingcart.FieldAmount,
		})
	}
	if value, ok := scu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shoppingcart.FieldUpdateAt,
		})
	}
	if scu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedBookIDs(); len(nodes) > 0 && !scu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedUserIDs(); len(nodes) > 0 && !scu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ShoppingCartUpdateOne is the builder for updating a single ShoppingCart entity.
type ShoppingCartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShoppingCartMutation
}

// SetAmount sets the "amount" field.
func (scuo *ShoppingCartUpdateOne) SetAmount(i int) *ShoppingCartUpdateOne {
	scuo.mutation.ResetAmount()
	scuo.mutation.SetAmount(i)
	return scuo
}

// AddAmount adds i to the "amount" field.
func (scuo *ShoppingCartUpdateOne) AddAmount(i int) *ShoppingCartUpdateOne {
	scuo.mutation.AddAmount(i)
	return scuo
}

// SetUpdateAt sets the "update_at" field.
func (scuo *ShoppingCartUpdateOne) SetUpdateAt(t time.Time) *ShoppingCartUpdateOne {
	scuo.mutation.SetUpdateAt(t)
	return scuo
}

// AddBookIDs adds the "book" edge to the Book entity by IDs.
func (scuo *ShoppingCartUpdateOne) AddBookIDs(ids ...int) *ShoppingCartUpdateOne {
	scuo.mutation.AddBookIDs(ids...)
	return scuo
}

// AddBook adds the "book" edges to the Book entity.
func (scuo *ShoppingCartUpdateOne) AddBook(b ...*Book) *ShoppingCartUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return scuo.AddBookIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (scuo *ShoppingCartUpdateOne) AddUserIDs(ids ...int) *ShoppingCartUpdateOne {
	scuo.mutation.AddUserIDs(ids...)
	return scuo
}

// AddUser adds the "user" edges to the User entity.
func (scuo *ShoppingCartUpdateOne) AddUser(u ...*User) *ShoppingCartUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scuo.AddUserIDs(ids...)
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scuo *ShoppingCartUpdateOne) Mutation() *ShoppingCartMutation {
	return scuo.mutation
}

// ClearBook clears all "book" edges to the Book entity.
func (scuo *ShoppingCartUpdateOne) ClearBook() *ShoppingCartUpdateOne {
	scuo.mutation.ClearBook()
	return scuo
}

// RemoveBookIDs removes the "book" edge to Book entities by IDs.
func (scuo *ShoppingCartUpdateOne) RemoveBookIDs(ids ...int) *ShoppingCartUpdateOne {
	scuo.mutation.RemoveBookIDs(ids...)
	return scuo
}

// RemoveBook removes "book" edges to Book entities.
func (scuo *ShoppingCartUpdateOne) RemoveBook(b ...*Book) *ShoppingCartUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return scuo.RemoveBookIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (scuo *ShoppingCartUpdateOne) ClearUser() *ShoppingCartUpdateOne {
	scuo.mutation.ClearUser()
	return scuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (scuo *ShoppingCartUpdateOne) RemoveUserIDs(ids ...int) *ShoppingCartUpdateOne {
	scuo.mutation.RemoveUserIDs(ids...)
	return scuo
}

// RemoveUser removes "user" edges to User entities.
func (scuo *ShoppingCartUpdateOne) RemoveUser(u ...*User) *ShoppingCartUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return scuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShoppingCartUpdateOne) Select(field string, fields ...string) *ShoppingCartUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShoppingCart entity.
func (scuo *ShoppingCartUpdateOne) Save(ctx context.Context) (*ShoppingCart, error) {
	var (
		err  error
		node *ShoppingCart
	)
	scuo.defaults()
	if len(scuo.hooks) == 0 {
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingCartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShoppingCartUpdateOne) SaveX(ctx context.Context) *ShoppingCart {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShoppingCartUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShoppingCartUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ShoppingCartUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdateAt(); !ok {
		v := shoppingcart.UpdateDefaultUpdateAt()
		scuo.mutation.SetUpdateAt(v)
	}
}

func (scuo *ShoppingCartUpdateOne) sqlSave(ctx context.Context) (_node *ShoppingCart, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shoppingcart.Table,
			Columns: shoppingcart.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shoppingcart.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShoppingCart.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shoppingcart.FieldID)
		for _, f := range fields {
			if !shoppingcart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shoppingcart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shoppingcart.FieldAmount,
		})
	}
	if value, ok := scuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shoppingcart.FieldAmount,
		})
	}
	if value, ok := scuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shoppingcart.FieldUpdateAt,
		})
	}
	if scuo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedBookIDs(); len(nodes) > 0 && !scuo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.BookTable,
			Columns: []string{shoppingcart.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !scuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShoppingCart{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
